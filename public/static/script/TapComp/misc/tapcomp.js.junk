//Where I am dumping all the commented out code from the code cleanup


//Variables

/* 

var GameViewer;
let cfx;
 */




/* function window_loaded() {
	console.debug('the page has loaded');

	init();

	start();

	loop();

} */


/* if (GameViewer.getContext) {
	console.debug("canvas found");

	const resize = () => {
		GameViewer.width = window.innerWidth;
		GameViewer.height = window.innerHeight;
	};

	resize();
	//window.addEventListener("resize", resize);

	GameViewer.width = document.body.clientWidth; //document.width is obsolete
	GameViewer.height = document.body.clientHeight; //document.height is obsolete
	canvasW = GameViewer.width;
	canvasH = GameViewer.height;

	drawAtPercentage(currentPercent);



	document.addEventListener('keypress', (event) => {
		if (event.key === "=") {
			currentPercent += increment
			drawAtPercentage(currentPercent);
		}
		else if (event.key === "-") {
			currentPercent -= increment
			drawAtPercentage(currentPercent);
		}
		console.debug(`key ${event.key} was pressed and percentage is at ${currentPercent}`)
	});

	const TouchArray = [];
	// Create touchstart handler
	document.addEventListener('touchstart', (event) => {
		// Iterate through the touch points that were activated
		// for this element and process each event 'target'
		let touches = event.touches;
		for (var i = 0; i < touches.length; i++) {
			//process_touch(event.targetTouches[i])
			let touch = {
				X: touches[i].clientX,
				Y: touches[i].clientY,
				force: touches[i].force,
				identifier: touches[i].identifier
			}
			if (touch.Y < canvasH / 2) {
				currentPercent += increment;
				drawAtPercentage(currentPercent);
				console.debug('increment increased')
			} else if (touch.Y > canvasH / 2) {
				currentPercent -= increment;
				drawAtPercentage(currentPercent);
				console.debug('increment decreased')
			}

			TouchArray.push(touch);
		};
	}); */
	/* document.addEventListener('touchend', (event) => {
		// Iterate through the touch points that were activated
		// for this element and process each event 'target'
		console.debug('touch end events')
		let touches = event.touches;
		for (var i = 0; i < touches.length; i++) {
			//process_touch(event.targetTouches[i])
			let touch = {
				X: touches[i].clientX,
				Y: touches[i].clientY,
				force: touches[i].force,
				identifier: touches[i].identifier
			}
			let TouchObj = TouchArray[touch.identifier];
			if (TouchObj.Y < canvasH/2) {
				currentPercent += increment;
				drawAtPercentage(currentPercent);
				console.debug('increment increased')
			} else if (TouchObj.Y > canvasH/2) {
				currentPercent -= increment;
				drawAtPercentage(currentPercent);
				console.debug('increment decreased')
			}
	
			let ta = [];
			for (var i = 0; i < TouchArray.length; i++) {
				if (TouchArray[i].identifier === touch.identifier) { 
					console.debug(`Touch Array [${i}] was removed`);
				} else {
					ta.push(TouchArray[i]);
				}
			}
			TouchArray = new Array(ta);
	
		};
	});
	
 */

    /* document.addEventListener('touchstart', (event) => {
		if (event.key === "=") {
			currentPercent += increment
			drawAtPercentage(currentPercent);
		}
		else if (event.key === "-") {
			currentPercent -= increment
			drawAtPercentage(currentPercent);
		}
		console.debug(`key ${event.key} was pressed and percentage is at ${currentPercent}`)
	}); */

	


	/* ctx.beginPath();
	ctx.rect(0, 0, canvasW, canvasH / 2);
	ctx.fillStyle = "red";
	ctx.fill();
	ctx.closePath();
	
	ctx.beginPath();
	ctx.rect(0, canvasH / 2, canvasW, canvasH / 2);
	ctx.fillStyle = "blue";
	ctx.fill();
	ctx.closePath();
	
	ctx.beginPath();
	
	ctx.rect(0, (canvasH / 2)-(hPoint/2), canvasW, hPoint);
	ctx.fillStyle = "black";
	ctx.fill();
	ctx.closePath();
	
	GameSpace.addEventListener('click', function() => {
		return;
	}); */






/* function init()
{
	canvas = document.getElementById("thegame");
	canvas.width = document.body.clientWidth; //document.width is obsolete
	canvas.height = document.body.clientHeight; //document.height is obsolete
	canvasW = canvas.width;
	canvasH = canvas.height;
	
	if( canvas.getContext )
	{
		setup();
		setInterval( run , 33 );
	}
}
	
function setup () {
	
}
	
function run() {
	
} */
